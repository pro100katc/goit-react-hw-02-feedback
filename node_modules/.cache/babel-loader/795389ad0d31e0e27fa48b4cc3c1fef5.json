{"ast":null,"code":"var _jsxFileName = \"/Users/serhiikotcinskiy/Documents/JS 59/goit-react-hw-02-feedback/src/components/App.jsx\";\nimport { Component } from \"react\";\nimport { Section } from \"./Section/Section\";\nimport { Statistics } from \"./Statistics/Statistics\";\nimport { Notification } from \"components/Notification/Notification\";\nimport { FeedbackOptions } from \"./FeedbackOptions/FeedbackOptions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.countLeaveFeedback = event => {\n      const feedbackType = event.target.name;\n      this.setState(prevstate => prevstate[feedbackType] += 1);\n    };\n  }\n\n  countTotalFeedback() {\n    const total = Object.values(this.state).reduce(function (previousValue, currentValue) {\n      return previousValue + currentValue;\n    });\n    return total;\n  }\n\n  countPositiveFeedbackPercentage() {\n    const positiveFeedbackPercentage = this.state.good / this.countTotalFeedback() * 100;\n    return Math.round(positiveFeedbackPercentage);\n  }\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad\n    } = this.state;\n    const optionsTypes = Object.keys(this.state);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Section, {\n        title: \"Please leave feedback\",\n        children: /*#__PURE__*/_jsxDEV(FeedbackOptions, {\n          options: optionsTypes,\n          onLeaveFeedback: this.countLeaveFeedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Section, {\n        title: \"Statistics\",\n        children: this.countTotalFeedback() ? /*#__PURE__*/_jsxDEV(Statistics, {\n          good: good,\n          neutral: neutral,\n          bad: bad,\n          total: this.countTotalFeedback(),\n          positivePercentage: this.countPositiveFeedbackPercentage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this) : /*#__PURE__*/_jsxDEV(Notification, {\n          message: \"There is no feedback\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/serhiikotcinskiy/Documents/JS 59/goit-react-hw-02-feedback/src/components/App.jsx"],"names":["Component","Section","Statistics","Notification","FeedbackOptions","App","state","good","neutral","bad","countLeaveFeedback","event","feedbackType","target","name","setState","prevstate","countTotalFeedback","total","Object","values","reduce","previousValue","currentValue","countPositiveFeedbackPercentage","positiveFeedbackPercentage","Math","round","render","optionsTypes","keys"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,SAASC,YAAT,QAA6B,sCAA7B;AACA,SAASC,eAAT,QAAgC,mCAAhC;;;AAEA,OAAO,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAEjCM,KAFiC,GAEzB;AACNC,MAAAA,IAAI,EAAE,CADA;AAENC,MAAAA,OAAO,EAAE,CAFH;AAGNC,MAAAA,GAAG,EAAE;AAHC,KAFyB;;AAAA,SAoBjCC,kBApBiC,GAoBXC,KAAD,IAAW;AAC9B,YAAMC,YAAY,GAAGD,KAAK,CAACE,MAAN,CAAaC,IAAlC;AACA,WAAKC,QAAL,CAAcC,SAAS,IAAIA,SAAS,CAACJ,YAAD,CAAT,IAA2B,CAAtD;AACD,KAvBgC;AAAA;;AAQjCK,EAAAA,kBAAkB,GAAE;AAClB,UAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,KAAKd,KAAnB,EAA0Be,MAA1B,CAAiC,UAASC,aAAT,EAAwBC,YAAxB,EAAsC;AACnF,aAAOD,aAAa,GAAGC,YAAvB;AACD,KAFa,CAAd;AAGA,WAAOL,KAAP;AACD;;AAEDM,EAAAA,+BAA+B,GAAG;AAChC,UAAMC,0BAA0B,GAAI,KAAKnB,KAAL,CAAWC,IAAX,GAAkB,KAAKU,kBAAL,EAAnB,GAAgD,GAAnF;AACA,WAAOS,IAAI,CAACC,KAAL,CAAWF,0BAAX,CAAP;AACD;;AAODG,EAAAA,MAAM,GAAI;AACR,UAAM;AAACrB,MAAAA,IAAD;AAAOC,MAAAA,OAAP;AAAgBC,MAAAA;AAAhB,QAAuB,KAAKH,KAAlC;AACA,UAAMuB,YAAY,GAAGV,MAAM,CAACW,IAAP,CAAY,KAAKxB,KAAjB,CAArB;AAEA,wBAAO;AAAA,8BACL,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC,uBAAf;AAAA,+BACE,QAAC,eAAD;AAAiB,UAAA,OAAO,EAAEuB,YAA1B;AAAwC,UAAA,eAAe,EAAE,KAAKnB;AAA9D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADK,eAIL,QAAC,OAAD;AAAS,QAAA,KAAK,EAAC,YAAf;AAAA,kBACG,KAAKO,kBAAL,kBACD,QAAC,UAAD;AAAY,UAAA,IAAI,EAAEV,IAAlB;AAAwB,UAAA,OAAO,EAAEC,OAAjC;AAA0C,UAAA,GAAG,EAAEC,GAA/C;AAAoD,UAAA,KAAK,EAAE,KAAKQ,kBAAL,EAA3D;AAAsF,UAAA,kBAAkB,EAAE,KAAKO,+BAAL;AAA1G;AAAA;AAAA;AAAA;AAAA,gBADC,gBAED,QAAC,YAAD;AAAc,UAAA,OAAO,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,cAJK;AAAA,oBAAP;AAUC;;AAvC8B;AAwClC","sourcesContent":["import { Component } from \"react\"\nimport { Section } from \"./Section/Section\";\nimport { Statistics } from \"./Statistics/Statistics\";\nimport { Notification } from \"components/Notification/Notification\";\nimport { FeedbackOptions } from \"./FeedbackOptions/FeedbackOptions\";\n\nexport class App extends Component {\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  }\n\n  countTotalFeedback(){\n    const total = Object.values(this.state).reduce(function(previousValue, currentValue) {\n      return previousValue + currentValue;\n    });\n    return total\n  }\n\n  countPositiveFeedbackPercentage() {\n    const positiveFeedbackPercentage = (this.state.good / this.countTotalFeedback()) * 100;\n    return Math.round(positiveFeedbackPercentage)\n  }\n \n  countLeaveFeedback = (event) => {\n    const feedbackType = event.target.name\n    this.setState(prevstate => prevstate[feedbackType] += 1)\n  }\n\n  render () {\n    const {good, neutral, bad} = this.state;\n    const optionsTypes = Object.keys(this.state)\n\n    return <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={optionsTypes} onLeaveFeedback={this.countLeaveFeedback}/>\n      </Section> \n      <Section title=\"Statistics\">\n        {this.countTotalFeedback() ? \n        <Statistics good={good} neutral={neutral} bad={bad} total={this.countTotalFeedback()} positivePercentage={this.countPositiveFeedbackPercentage()}/> :\n        <Notification message=\"There is no feedback\"/>}\n      </Section> \n    </>\n    }\n};\n"]},"metadata":{},"sourceType":"module"}